rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Kullanıcı kimlik doğrulaması yapılmış mı kontrol et
    function isAuthenticated() {
      return request.auth != null;
    }

    // İsteği yapan kullanıcı, belgenin sahibi mi kontrol et
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Kullanıcı profilleri
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // Spotify profil güncellemelerine izin ver
      allow update: if isOwner(userId) && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['spotifyToken', 'spotifyProfile', 'lastSpotifySync']);
    }

    // Dinlenen albümler
    match /listened/{document=**} {
      allow read: if isAuthenticated();
      // Kullanıcının kendi dinlediği albümleri eklemesine izin ver
      allow create, update: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Favoriler
    match /favorites/{document=**} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    match /comments/{commentId} {
      // Okuma herkes için açık
      allow read: if true;
      
      // Yazma için basit yetkilendirme
      allow create: if request.auth != null;
      
      // Kullanıcı sadece kendi yorumunu silebilir
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
        
      allow update: if false;
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}